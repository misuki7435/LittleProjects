#include<iostream>
#include<vector>
#include<string>
#define POT preOrderTraversal

//example input (A(B(E(K,L),F),C(G),D(H(M),I,J)))
using namespace std;
typedef struct treeNode{
		char data=' ';
		treeNode *leftChild=nullptr;
		treeNode *rightSibling=nullptr;
		//methods
		void setData(char str){
			data=str;
		}
		void plusLeft(void){
			leftChild=new treeNode;
		}
		void plusRight(void){
			rightSibling=new treeNode;
		}
}node;

void createTree(node *root,string str){	//[LE,RE]
	root->data=str[1];
	int cranketL=1,cranketR=0;
	int index=2;
	while(cranketL!=cranketR){
		if(str[index]=='(')
			cranketL++;
		else if(str[index]==')')
			cranketR++;
		if(cranketL==cranketR+2&&str[index]=='('){
			root->leftChild=new node;
			string temp=str;
			temp.erase(temp.begin(),temp.begin()+index);
			createTree(root->leftChild,temp);
		}
		if(cranketL==cranketR+1&&str[index]>='A'&&str[index]<='Z'){
			root->rightSibling=new node;
			root=root->rightSibling;
			root->data=str[index];
		}
		index++;
	}	
}

void preOrderTraversal(node *root){
	cout<<root->data<<" ";
	if(root->leftChild)
		POT(root->leftChild);
	if(root->rightSibling)
		POT(root->rightSibling);
}

int main(){
	node *root=new node;
	string input;
	cin>>input;
	createTree(root,input);
	
	POT(root);
	
	return 0;
} 
